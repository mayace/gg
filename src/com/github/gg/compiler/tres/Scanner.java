/* The following code was generated by JFlex 1.5.1 */

package com.github.gg.compiler.tres;

import java_cup.runtime.Symbol;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>./src/scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\1\2\0\1\2\16\7\4\0\1\3\1\15\2\0"+
    "\1\6\1\30\2\0\1\20\1\21\1\11\1\26\1\0\1\27\1\5"+
    "\1\10\12\4\1\13\1\14\1\17\1\12\1\16\2\0\1\6\1\55"+
    "\1\56\12\6\1\52\14\6\1\22\1\0\1\23\1\0\1\61\1\0"+
    "\1\36\1\62\1\35\1\34\1\45\1\47\1\46\1\41\1\33\1\6"+
    "\1\44\1\37\1\54\1\50\1\32\1\40\1\6\1\51\1\42\1\43"+
    "\1\53\1\31\1\6\1\57\1\6\1\60\1\24\1\0\1\25\1\0"+
    "\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0"+
    "\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6"+
    "\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6"+
    "\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6"+
    "\15\0\5\7\6\0\1\6\4\0\13\7\5\0\53\6\37\7\4\0"+
    "\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7"+
    "\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6"+
    "\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6"+
    "\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6"+
    "\3\7\1\6\5\7\22\0\31\6\3\7\104\0\1\6\1\0\13\6"+
    "\67\0\33\7\1\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7"+
    "\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6"+
    "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7"+
    "\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0"+
    "\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6"+
    "\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0"+
    "\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6"+
    "\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6"+
    "\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7"+
    "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0"+
    "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0"+
    "\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0"+
    "\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6"+
    "\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0"+
    "\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0"+
    "\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6"+
    "\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7"+
    "\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6"+
    "\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0"+
    "\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6"+
    "\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7"+
    "\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0"+
    "\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6"+
    "\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6"+
    "\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6"+
    "\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6"+
    "\5\0\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6"+
    "\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6"+
    "\20\0\15\6\3\0\33\6\25\0\15\7\4\0\1\7\3\0\14\7"+
    "\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6"+
    "\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0\46\6"+
    "\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0\1\7"+
    "\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0"+
    "\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6"+
    "\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6"+
    "\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6"+
    "\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0\31\6\7\0"+
    "\1\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6\1\0"+
    "\4\6\14\0\13\6\115\0\12\6\1\7\3\6\1\7\4\6\1\7"+
    "\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7"+
    "\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0\12\7\34\6"+
    "\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7"+
    "\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6\1\7\10\6"+
    "\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7\4\0\60\6"+
    "\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6"+
    "\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6"+
    "\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6"+
    "\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0"+
    "\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0"+
    "\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\1\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\6\4\1\25"+
    "\1\26\6\4\2\0\1\27\1\30\1\31\1\32\2\4"+
    "\1\33\17\4\1\34\2\35\23\4\1\36\2\4\1\37"+
    "\1\4\1\40\4\4\1\41\2\4\1\42\1\4\1\43"+
    "\3\4\1\44\3\4\1\45\2\4\1\46\1\4\1\47"+
    "\5\4\1\50\27\4\1\51\1\52\15\4\1\53\16\4"+
    "\1\54\1\4\1\55\3\4\1\56\12\4\1\57\2\4"+
    "\1\60\4\4\1\61\3\4\1\62\2\4\1\63\6\4"+
    "\1\64\1\65\1\66\3\4\1\67\1\4\1\70\1\4"+
    "\1\71\3\4\1\72\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\146\0\231\0\314\0\377\0\63"+
    "\0\u0132\0\63\0\63\0\u0165\0\u0198\0\u01cb\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\63\0\u01fe"+
    "\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\63"+
    "\0\63\0\63\0\63\0\u052e\0\u0561\0\314\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u04c8\0\63\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\u0c5a\0\314\0\u0c8d\0\u0cc0\0\314\0\u0cf3"+
    "\0\314\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\314\0\u0df2\0\u0e25"+
    "\0\314\0\u0e58\0\314\0\u0e8b\0\u0ebe\0\u0ef1\0\314\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\314\0\u0fbd\0\u0ff0\0\314\0\u1023\0\314"+
    "\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\314\0\u1155\0\u1188"+
    "\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320"+
    "\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8"+
    "\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\314\0\314\0\u15ea"+
    "\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782"+
    "\0\u17b5\0\u17e8\0\u181b\0\u184e\0\314\0\u1881\0\u18b4\0\u18e7"+
    "\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f"+
    "\0\u1ab2\0\u1ae5\0\u1b18\0\314\0\u1b4b\0\314\0\u1b7e\0\u1bb1"+
    "\0\u1be4\0\314\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16"+
    "\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\314\0\u1e15\0\u1e48\0\314"+
    "\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\314\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\314\0\u1fe0\0\u2013\0\314\0\u2046\0\u2079\0\u20ac\0\u20df"+
    "\0\u2112\0\u2145\0\314\0\314\0\314\0\u2178\0\u21ab\0\u21de"+
    "\0\314\0\u2211\0\314\0\u2244\0\314\0\u2277\0\u22aa\0\u22dd"+
    "\0\314\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\2\1\6\1\2"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\6\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\6\1\42\1\43\1\6"+
    "\1\44\10\6\1\45\64\0\1\3\65\0\1\5\1\46"+
    "\61\0\1\6\1\0\2\6\21\0\32\6\10\0\1\47"+
    "\64\0\1\50\62\0\1\51\62\0\1\52\62\0\1\53"+
    "\54\0\1\6\1\0\2\6\21\0\1\6\1\54\30\6"+
    "\4\0\1\6\1\0\2\6\21\0\1\55\31\6\4\0"+
    "\1\6\1\0\2\6\21\0\16\6\1\56\1\57\12\6"+
    "\4\0\1\6\1\0\2\6\21\0\5\6\1\60\2\6"+
    "\1\61\21\6\4\0\1\6\1\0\2\6\21\0\20\6"+
    "\1\62\11\6\4\0\1\6\1\0\2\6\21\0\2\6"+
    "\1\63\27\6\4\0\1\6\1\0\2\6\21\0\1\6"+
    "\1\64\16\6\1\65\11\6\4\0\1\6\1\0\2\6"+
    "\21\0\14\6\1\66\15\6\4\0\1\6\1\0\2\6"+
    "\21\0\12\6\1\67\17\6\4\0\1\6\1\0\2\6"+
    "\21\0\10\6\1\70\3\6\1\71\15\6\4\0\1\6"+
    "\1\0\2\6\21\0\1\6\1\72\30\6\4\0\1\6"+
    "\1\0\2\6\21\0\6\6\1\73\23\6\4\0\1\6"+
    "\1\0\2\6\21\0\14\6\1\74\15\6\4\0\1\6"+
    "\1\0\2\6\21\0\1\6\1\75\30\6\4\0\1\76"+
    "\56\0\1\47\1\77\1\100\6\47\1\0\51\47\4\0"+
    "\1\6\1\0\2\6\21\0\2\6\1\101\27\6\4\0"+
    "\1\6\1\0\2\6\21\0\5\6\1\102\24\6\4\0"+
    "\1\6\1\0\2\6\21\0\12\6\1\103\17\6\4\0"+
    "\1\6\1\0\2\6\21\0\6\6\1\104\23\6\4\0"+
    "\1\6\1\0\2\6\21\0\5\6\1\105\24\6\4\0"+
    "\1\6\1\0\2\6\21\0\4\6\1\106\25\6\4\0"+
    "\1\6\1\0\2\6\21\0\14\6\1\107\2\6\1\110"+
    "\12\6\4\0\1\6\1\0\2\6\21\0\6\6\1\111"+
    "\23\6\4\0\1\6\1\0\2\6\21\0\2\6\1\112"+
    "\27\6\4\0\1\6\1\0\2\6\21\0\5\6\1\113"+
    "\24\6\4\0\1\6\1\0\2\6\21\0\5\6\1\114"+
    "\12\6\1\115\11\6\4\0\1\6\1\0\2\6\21\0"+
    "\14\6\1\116\15\6\4\0\1\6\1\0\2\6\21\0"+
    "\26\6\1\117\3\6\4\0\1\6\1\0\2\6\21\0"+
    "\12\6\1\120\17\6\4\0\1\6\1\0\2\6\21\0"+
    "\1\6\1\121\30\6\4\0\1\6\1\0\2\6\21\0"+
    "\4\6\1\122\25\6\4\0\1\6\1\0\2\6\21\0"+
    "\1\6\1\123\30\6\1\0\1\77\65\0\1\6\1\0"+
    "\2\6\21\0\3\6\1\124\26\6\4\0\1\6\1\0"+
    "\2\6\21\0\6\6\1\125\23\6\4\0\1\6\1\0"+
    "\2\6\21\0\30\6\1\126\1\6\4\0\1\6\1\0"+
    "\2\6\21\0\6\6\1\127\23\6\4\0\1\6\1\0"+
    "\2\6\21\0\20\6\1\130\11\6\4\0\1\6\1\0"+
    "\2\6\21\0\1\6\1\131\30\6\4\0\1\6\1\0"+
    "\2\6\21\0\17\6\1\132\12\6\4\0\1\6\1\0"+
    "\2\6\21\0\14\6\1\133\15\6\4\0\1\6\1\0"+
    "\2\6\21\0\2\6\1\134\27\6\4\0\1\6\1\0"+
    "\2\6\21\0\17\6\1\135\12\6\4\0\1\6\1\0"+
    "\2\6\21\0\7\6\1\136\22\6\4\0\1\6\1\0"+
    "\2\6\21\0\4\6\1\137\25\6\4\0\1\6\1\0"+
    "\2\6\21\0\2\6\1\140\27\6\4\0\1\6\1\0"+
    "\2\6\21\0\17\6\1\141\12\6\4\0\1\6\1\0"+
    "\2\6\21\0\12\6\1\142\17\6\4\0\1\6\1\0"+
    "\2\6\21\0\1\6\1\143\30\6\4\0\1\6\1\0"+
    "\2\6\21\0\5\6\1\144\24\6\4\0\1\6\1\0"+
    "\2\6\21\0\12\6\1\145\17\6\4\0\1\6\1\0"+
    "\2\6\21\0\6\6\1\146\23\6\4\0\1\6\1\0"+
    "\2\6\21\0\1\6\1\147\30\6\4\0\1\6\1\0"+
    "\2\6\21\0\12\6\1\150\17\6\4\0\1\6\1\0"+
    "\2\6\21\0\30\6\1\151\1\6\4\0\1\6\1\0"+
    "\2\6\21\0\27\6\1\152\2\6\4\0\1\6\1\0"+
    "\2\6\21\0\5\6\1\153\24\6\4\0\1\6\1\0"+
    "\2\6\21\0\15\6\1\154\14\6\4\0\1\6\1\0"+
    "\2\6\21\0\12\6\1\155\17\6\4\0\1\6\1\0"+
    "\2\6\21\0\13\6\1\156\16\6\4\0\1\6\1\0"+
    "\2\6\21\0\17\6\1\157\12\6\4\0\1\6\1\0"+
    "\2\6\21\0\1\6\1\160\30\6\4\0\1\6\1\0"+
    "\2\6\21\0\12\6\1\161\17\6\4\0\1\6\1\0"+
    "\2\6\21\0\5\6\1\162\24\6\4\0\1\6\1\0"+
    "\2\6\21\0\14\6\1\163\15\6\4\0\1\6\1\0"+
    "\2\6\21\0\1\6\1\164\30\6\4\0\1\6\1\0"+
    "\2\6\21\0\12\6\1\165\17\6\4\0\1\6\1\0"+
    "\2\6\21\0\1\6\1\166\30\6\4\0\1\6\1\0"+
    "\2\6\21\0\1\6\1\167\30\6\4\0\1\6\1\0"+
    "\2\6\21\0\21\6\1\170\2\6\1\171\1\172\4\6"+
    "\4\0\1\6\1\0\2\6\21\0\15\6\1\173\14\6"+
    "\4\0\1\6\1\0\2\6\21\0\30\6\1\174\1\6"+
    "\4\0\1\6\1\0\2\6\21\0\17\6\1\175\12\6"+
    "\4\0\1\6\1\0\2\6\21\0\5\6\1\176\24\6"+
    "\4\0\1\6\1\0\2\6\21\0\30\6\1\177\1\6"+
    "\4\0\1\6\1\0\2\6\21\0\1\6\1\200\30\6"+
    "\4\0\1\6\1\0\2\6\21\0\17\6\1\201\12\6"+
    "\4\0\1\6\1\0\2\6\21\0\22\6\1\202\7\6"+
    "\4\0\1\6\1\0\2\6\21\0\1\6\1\203\30\6"+
    "\4\0\1\6\1\0\2\6\21\0\10\6\1\204\21\6"+
    "\4\0\1\6\1\0\2\6\21\0\30\6\1\205\1\6"+
    "\4\0\1\6\1\0\2\6\21\0\12\6\1\206\17\6"+
    "\4\0\1\6\1\0\2\6\21\0\15\6\1\207\14\6"+
    "\4\0\1\6\1\0\2\6\21\0\17\6\1\210\12\6"+
    "\4\0\1\6\1\0\2\6\21\0\4\6\1\211\4\6"+
    "\1\212\4\6\1\213\12\6\1\214\4\0\1\6\1\0"+
    "\2\6\21\0\30\6\1\215\1\6\4\0\1\6\1\0"+
    "\2\6\21\0\1\6\1\216\30\6\4\0\1\6\1\0"+
    "\2\6\21\0\23\6\1\217\6\6\4\0\1\6\1\0"+
    "\2\6\21\0\1\6\1\220\30\6\4\0\1\6\1\0"+
    "\2\6\21\0\5\6\1\221\24\6\4\0\1\6\1\0"+
    "\2\6\21\0\12\6\1\222\17\6\4\0\1\6\1\0"+
    "\2\6\21\0\1\6\1\223\30\6\4\0\1\6\1\0"+
    "\2\6\21\0\22\6\1\224\7\6\4\0\1\6\1\0"+
    "\2\6\21\0\30\6\1\225\1\6\4\0\1\6\1\0"+
    "\2\6\21\0\10\6\1\226\21\6\4\0\1\6\1\0"+
    "\2\6\21\0\12\6\1\227\17\6\4\0\1\6\1\0"+
    "\2\6\21\0\6\6\1\230\23\6\4\0\1\6\1\0"+
    "\2\6\21\0\1\6\1\231\30\6\4\0\1\6\1\0"+
    "\2\6\21\0\2\6\1\232\6\6\1\233\20\6\4\0"+
    "\1\6\1\0\2\6\21\0\6\6\1\234\23\6\4\0"+
    "\1\6\1\0\2\6\21\0\20\6\1\235\11\6\4\0"+
    "\1\6\1\0\2\6\21\0\1\6\1\236\30\6\4\0"+
    "\1\6\1\0\2\6\21\0\30\6\1\237\1\6\4\0"+
    "\1\6\1\0\2\6\21\0\6\6\1\240\23\6\4\0"+
    "\1\6\1\0\2\6\21\0\12\6\1\241\17\6\4\0"+
    "\1\6\1\0\2\6\21\0\5\6\1\242\24\6\4\0"+
    "\1\6\1\0\2\6\21\0\20\6\1\243\11\6\4\0"+
    "\1\6\1\0\2\6\21\0\1\6\1\244\30\6\4\0"+
    "\1\6\1\0\2\6\21\0\1\6\1\245\30\6\4\0"+
    "\1\6\1\0\2\6\21\0\17\6\1\246\12\6\4\0"+
    "\1\6\1\0\2\6\21\0\12\6\1\247\17\6\4\0"+
    "\1\6\1\0\2\6\21\0\14\6\1\250\15\6\4\0"+
    "\1\6\1\0\2\6\21\0\30\6\1\251\1\6\4\0"+
    "\1\6\1\0\2\6\21\0\2\6\1\252\6\6\1\253"+
    "\20\6\4\0\1\6\1\0\2\6\21\0\1\6\1\254"+
    "\30\6\4\0\1\6\1\0\2\6\21\0\1\6\1\255"+
    "\30\6\4\0\1\6\1\0\2\6\21\0\20\6\1\256"+
    "\11\6\4\0\1\6\1\0\2\6\21\0\2\6\1\257"+
    "\27\6\4\0\1\6\1\0\2\6\21\0\5\6\1\260"+
    "\24\6\4\0\1\6\1\0\2\6\21\0\6\6\1\261"+
    "\23\6\4\0\1\6\1\0\2\6\21\0\12\6\1\262"+
    "\17\6\4\0\1\6\1\0\2\6\21\0\20\6\1\263"+
    "\11\6\4\0\1\6\1\0\2\6\21\0\5\6\1\264"+
    "\24\6\4\0\1\6\1\0\2\6\21\0\2\6\1\265"+
    "\1\6\1\266\11\6\1\267\12\6\1\270\4\0\1\6"+
    "\1\0\2\6\21\0\17\6\1\271\12\6\4\0\1\6"+
    "\1\0\2\6\21\0\12\6\1\272\17\6\4\0\1\6"+
    "\1\0\2\6\21\0\30\6\1\273\1\6\4\0\1\6"+
    "\1\0\2\6\21\0\17\6\1\274\12\6\4\0\1\6"+
    "\1\0\2\6\21\0\12\6\1\275\17\6\4\0\1\6"+
    "\1\0\2\6\21\0\14\6\1\276\15\6\4\0\1\6"+
    "\1\0\2\6\21\0\2\6\1\277\27\6\4\0\1\6"+
    "\1\0\2\6\21\0\17\6\1\300\12\6\4\0\1\6"+
    "\1\0\2\6\21\0\17\6\1\301\12\6\4\0\1\6"+
    "\1\0\2\6\21\0\10\6\1\302\21\6\4\0\1\6"+
    "\1\0\2\6\21\0\6\6\1\303\23\6\4\0\1\6"+
    "\1\0\2\6\21\0\1\6\1\304\30\6\4\0\1\6"+
    "\1\0\2\6\21\0\12\6\1\305\17\6\4\0\1\6"+
    "\1\0\2\6\21\0\20\6\1\306\11\6\4\0\1\6"+
    "\1\0\2\6\21\0\2\6\1\307\6\6\1\310\20\6"+
    "\4\0\1\6\1\0\2\6\21\0\15\6\1\311\14\6"+
    "\4\0\1\6\1\0\2\6\21\0\5\6\1\312\24\6"+
    "\4\0\1\6\1\0\2\6\21\0\17\6\1\313\12\6"+
    "\4\0\1\6\1\0\2\6\21\0\12\6\1\314\17\6"+
    "\4\0\1\6\1\0\2\6\21\0\5\6\1\315\24\6"+
    "\4\0\1\6\1\0\2\6\21\0\1\6\1\316\30\6"+
    "\4\0\1\6\1\0\2\6\21\0\1\6\1\317\30\6"+
    "\4\0\1\6\1\0\2\6\21\0\2\6\1\320\27\6"+
    "\4\0\1\6\1\0\2\6\21\0\17\6\1\321\12\6"+
    "\4\0\1\6\1\0\2\6\21\0\12\6\1\322\17\6"+
    "\4\0\1\6\1\0\2\6\21\0\17\6\1\323\12\6"+
    "\4\0\1\6\1\0\2\6\21\0\15\6\1\324\14\6"+
    "\4\0\1\6\1\0\2\6\21\0\20\6\1\325\11\6"+
    "\4\0\1\6\1\0\2\6\21\0\5\6\1\326\24\6"+
    "\4\0\1\6\1\0\2\6\21\0\6\6\1\327\23\6"+
    "\4\0\1\6\1\0\2\6\21\0\17\6\1\330\12\6"+
    "\4\0\1\6\1\0\2\6\21\0\12\6\1\331\17\6"+
    "\4\0\1\6\1\0\2\6\21\0\20\6\1\332\11\6"+
    "\4\0\1\6\1\0\2\6\21\0\12\6\1\333\17\6"+
    "\4\0\1\6\1\0\2\6\21\0\14\6\1\334\15\6"+
    "\4\0\1\6\1\0\2\6\21\0\15\6\1\335\14\6"+
    "\4\0\1\6\1\0\2\6\21\0\2\6\1\336\27\6"+
    "\4\0\1\6\1\0\2\6\21\0\5\6\1\337\24\6"+
    "\4\0\1\6\1\0\2\6\21\0\17\6\1\340\12\6"+
    "\4\0\1\6\1\0\2\6\21\0\17\6\1\341\12\6"+
    "\4\0\1\6\1\0\2\6\21\0\15\6\1\342\14\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8976];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\1\1\2\11\3\1\11\11"+
    "\16\1\2\0\4\11\23\1\1\11\243\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn,yytext());
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2252) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(Sym.ERROR);
          }
        case 60: break;
        case 2: 
          { 
          }
        case 61: break;
        case 3: 
          { return symbol(Sym.INT);
          }
        case 62: break;
        case 4: 
          { return symbol(Sym.ID);
          }
        case 63: break;
        case 5: 
          { return symbol(Sym.DIV);
          }
        case 64: break;
        case 6: 
          { return symbol(Sym.MULT);
          }
        case 65: break;
        case 7: 
          { return symbol(Sym.EQUAL);
          }
        case 66: break;
        case 8: 
          { return symbol(Sym.DPUNTOS);
          }
        case 67: break;
        case 9: 
          { return symbol(Sym.PCOMA);
          }
        case 68: break;
        case 10: 
          { return symbol(Sym.BTHAN);
          }
        case 69: break;
        case 11: 
          { return symbol(Sym.LTHAN);
          }
        case 70: break;
        case 12: 
          { return symbol(Sym.LP);
          }
        case 71: break;
        case 13: 
          { return symbol(Sym.RP);
          }
        case 72: break;
        case 14: 
          { return symbol(Sym.LS);
          }
        case 73: break;
        case 15: 
          { return symbol(Sym.RS);
          }
        case 74: break;
        case 16: 
          { return symbol(Sym.LL);
          }
        case 75: break;
        case 17: 
          { return symbol(Sym.RL);
          }
        case 76: break;
        case 18: 
          { return symbol(Sym.PLUS);
          }
        case 77: break;
        case 19: 
          { return symbol(Sym.MINUS);
          }
        case 78: break;
        case 20: 
          { return symbol(Sym.MOD);
          }
        case 79: break;
        case 21: 
          { return symbol(Sym.P);
          }
        case 80: break;
        case 22: 
          { return symbol(Sym.H);
          }
        case 81: break;
        case 23: 
          { return symbol(Sym.DEQUAL);
          }
        case 82: break;
        case 24: 
          { return symbol(Sym.NEQUAL);
          }
        case 83: break;
        case 25: 
          { return symbol(Sym.BETHAN);
          }
        case 84: break;
        case 26: 
          { return symbol(Sym.LETHAN);
          }
        case 85: break;
        case 27: 
          { return symbol(Sym.IF);
          }
        case 86: break;
        case 28: 
          { return symbol(Sym.FLOAT);
          }
        case 87: break;
        case 29: 
          { return symbol(Sym.COMMENT);
          }
        case 88: break;
        case 30: 
          { return symbol(Sym.KW_VOID);
          }
        case 89: break;
        case 31: 
          { return symbol(Sym.KW_CALL);
          }
        case 90: break;
        case 32: 
          { return symbol(Sym.KW_ARCO);
          }
        case 91: break;
        case 33: 
          { return symbol(Sym.HEAP);
          }
        case 92: break;
        case 34: 
          { return symbol(Sym.THEN);
          }
        case 93: break;
        case 35: 
          { return symbol(Sym.GOTO);
          }
        case 94: break;
        case 36: 
          { return symbol(Sym.KW_OVALO);
          }
        case 95: break;
        case 37: 
          { return symbol(Sym.KW_LINEA);
          }
        case 96: break;
        case 38: 
          { return symbol(Sym.STACK);
          }
        case 97: break;
        case 39: 
          { return symbol(Sym.KW_TEXTO);
          }
        case 98: break;
        case 40: 
          { return symbol(Sym.KW_LIENZO);
          }
        case 99: break;
        case 41: 
          { return symbol(Sym.KW_POLIGONO);
          }
        case 100: break;
        case 42: 
          { return symbol(Sym.PRINT_NUM);
          }
        case 101: break;
        case 43: 
          { return symbol(Sym.PRINT_CHAR);
          }
        case 102: break;
        case 44: 
          { return symbol(Sym.KW_RECTANGULO);
          }
        case 103: break;
        case 45: 
          { return symbol(Sym.KW_INT2CHAR);
          }
        case 104: break;
        case 46: 
          { return symbol(Sym.KW_CHAR2INT);
          }
        case 105: break;
        case 47: 
          { return symbol(Sym.KW_INT2FLOAT);
          }
        case 106: break;
        case 48: 
          { return symbol(Sym.PRINT_BOOLEAN);
          }
        case 107: break;
        case 49: 
          { return symbol(Sym.KW_FLOAT2INT);
          }
        case 108: break;
        case 50: 
          { return symbol(Sym.KW_INT2STRING);
          }
        case 109: break;
        case 51: 
          { return symbol(Sym.KW_STRING2INT);
          }
        case 110: break;
        case 52: 
          { return symbol(Sym.KW_INT2BOOLEAN);
          }
        case 111: break;
        case 53: 
          { return symbol(Sym.KW_CHAR2STRING);
          }
        case 112: break;
        case 54: 
          { return symbol(Sym.KW_STRING2CHAR);
          }
        case 113: break;
        case 55: 
          { return symbol(Sym.KW_BOOLEAN2INT);
          }
        case 114: break;
        case 56: 
          { return symbol(Sym.KW_STRING2FLOAT);
          }
        case 115: break;
        case 57: 
          { return symbol(Sym.KW_FLOAT2STRING);
          }
        case 116: break;
        case 58: 
          { return symbol(Sym.KW_STRING2BOOLEAN);
          }
        case 117: break;
        case 59: 
          { return symbol(Sym.KW_BOOLEAN2STRING);
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(Sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
