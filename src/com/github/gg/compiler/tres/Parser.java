
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 11 13:22:34 CST 2014
//----------------------------------------------------

package com.github.gg.compiler.tres;

import com.github.gg.Dict;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 11 13:22:34 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\004\004\000\002\004\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\005\004\000\002\006\006\000\002" +
    "\006\011\000\002\021\005\000\002\022\006\000\002\023" +
    "\006\000\002\011\005\000\002\011\003\000\002\012\005" +
    "\000\002\012\003\000\002\013\004\000\002\013\003\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\003\000\002\015\005\000\002\015\005\000\002\015\003" +
    "\000\002\016\005\000\002\016\005\000\002\016\003\000" +
    "\002\017\004\000\002\017\003\000\002\020\003\000\002" +
    "\020\006\000\002\020\003\000\002\020\005\000\002\007" +
    "\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\014\002\uffff\004\013\030\020\033\012\037" +
    "\015\001\002\000\014\002\ufff9\004\ufff9\030\ufff9\033\ufff9" +
    "\037\ufff9\001\002\000\010\007\111\010\110\035\107\001" +
    "\002\000\004\002\106\001\002\000\014\002\ufffd\004\ufffd" +
    "\030\ufffd\033\ufffd\037\ufffd\001\002\000\014\002\ufffa\004" +
    "\ufffa\030\ufffa\033\ufffa\037\ufffa\001\002\000\014\002\ufffb" +
    "\004\ufffb\030\ufffb\033\ufffb\037\ufffb\001\002\000\014\004" +
    "\013\005\026\021\042\023\025\026\027\001\002\000\050" +
    "\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\027\uffd8\034\uffd8\035\uffd8\036\uffd8\001" +
    "\002\000\014\002\ufffc\004\ufffc\030\ufffc\033\ufffc\037\ufffc" +
    "\001\002\000\004\026\024\001\002\000\014\002\001\004" +
    "\013\030\020\033\012\037\015\001\002\000\014\002\ufff8" +
    "\004\ufff8\030\ufff8\033\ufff8\037\ufff8\001\002\000\004\004" +
    "\013\001\002\000\004\006\022\001\002\000\014\002\ufff4" +
    "\004\ufff4\030\ufff4\033\ufff4\037\ufff4\001\002\000\014\002" +
    "\ufffe\004\ufffe\030\ufffe\033\ufffe\037\ufffe\001\002\000\014" +
    "\004\013\005\026\021\042\023\025\026\027\001\002\000" +
    "\010\004\013\005\026\026\027\001\002\000\042\006\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7" +
    "\034\uffd7\036\uffd7\001\002\000\014\004\013\005\026\021" +
    "\042\023\025\026\027\001\002\000\044\006\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\027\uffdc\034\uffdc" +
    "\035\075\036\uffdc\001\002\000\042\006\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\027\uffdd\034\uffdd\036" +
    "\uffdd\001\002\000\042\006\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\027\uffdf\034\uffdf\036\uffdf\001\002" +
    "\000\042\006\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\056" +
    "\025\057\027\uffe2\034\uffe2\036\uffe2\001\002\000\036\006" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\022\053\023\054\027\uffe5\034\uffe5\036" +
    "\uffe5\001\002\000\032\006\uffec\011\046\012\044\013\047" +
    "\014\050\015\045\016\051\017\uffec\020\uffec\027\uffec\034" +
    "\uffec\036\uffec\001\002\000\016\006\uffee\017\uffee\020\uffee" +
    "\027\uffee\034\uffee\036\uffee\001\002\000\016\006\ufff0\017" +
    "\ufff0\020\073\027\ufff0\034\ufff0\036\ufff0\001\002\000\042" +
    "\006\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\027\uffda\034\uffda\036\uffda\001\002\000\006\017\071\027" +
    "\070\001\002\000\012\004\013\005\026\023\025\026\027" +
    "\001\002\000\032\006\uffed\011\046\012\044\013\047\014" +
    "\050\015\045\016\051\017\uffed\020\uffed\027\uffed\034\uffed" +
    "\036\uffed\001\002\000\012\004\013\005\026\023\025\026" +
    "\027\001\002\000\012\004\013\005\026\023\025\026\027" +
    "\001\002\000\012\004\013\005\026\023\025\026\027\001" +
    "\002\000\012\004\013\005\026\023\025\026\027\001\002" +
    "\000\012\004\013\005\026\023\025\026\027\001\002\000" +
    "\012\004\013\005\026\023\025\026\027\001\002\000\036" +
    "\006\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\022\053\023\054\027\uffe6\034\uffe6" +
    "\036\uffe6\001\002\000\012\004\013\005\026\023\025\026" +
    "\027\001\002\000\012\004\013\005\026\023\025\026\027" +
    "\001\002\000\042\006\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3" +
    "\024\056\025\057\027\uffe3\034\uffe3\036\uffe3\001\002\000" +
    "\012\004\013\005\026\023\025\026\027\001\002\000\012" +
    "\004\013\005\026\023\025\026\027\001\002\000\042\006" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\027" +
    "\uffe0\034\uffe0\036\uffe0\001\002\000\042\006\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\034\uffe1" +
    "\036\uffe1\001\002\000\042\006\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4" +
    "\023\uffe4\024\056\025\057\027\uffe4\034\uffe4\036\uffe4\001" +
    "\002\000\036\006\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\022\053\023\054\027" +
    "\uffeb\034\uffeb\036\uffeb\001\002\000\036\006\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\022\053\023\054\027\uffe8\034\uffe8\036\uffe8\001\002" +
    "\000\036\006\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\022\053\023\054\027\uffe7" +
    "\034\uffe7\036\uffe7\001\002\000\036\006\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\022\053\023\054\027\uffe9\034\uffe9\036\uffe9\001\002\000" +
    "\036\006\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\022\053\023\054\027\uffea\034" +
    "\uffea\036\uffea\001\002\000\014\002\ufff2\004\ufff2\030\ufff2" +
    "\033\ufff2\037\ufff2\001\002\000\014\004\013\005\026\021" +
    "\042\023\025\026\027\001\002\000\016\006\ufff1\017\ufff1" +
    "\020\073\027\ufff1\034\ufff1\036\ufff1\001\002\000\014\004" +
    "\013\005\026\021\042\023\025\026\027\001\002\000\016" +
    "\006\uffef\017\uffef\020\uffef\027\uffef\034\uffef\036\uffef\001" +
    "\002\000\014\004\013\005\026\021\042\023\025\026\027" +
    "\001\002\000\006\017\071\036\077\001\002\000\042\006" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\027" +
    "\uffdb\034\uffdb\036\uffdb\001\002\000\006\017\071\027\101" +
    "\001\002\000\042\006\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\027\uffd9\034\uffd9\036\uffd9\001\002\000" +
    "\042\006\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\027\uffde\034\uffde\036\uffde\001\002\000\006\017\071" +
    "\034\104\001\002\000\004\030\020\001\002\000\014\002" +
    "\ufff3\004\ufff3\030\ufff3\033\ufff3\037\ufff3\001\002\000\004" +
    "\002\000\001\002\000\014\004\013\005\026\021\042\023" +
    "\025\026\027\001\002\000\014\004\013\005\026\021\042" +
    "\023\025\026\027\001\002\000\014\002\ufff7\004\ufff7\030" +
    "\ufff7\033\ufff7\037\ufff7\001\002\000\006\006\113\017\071" +
    "\001\002\000\014\002\ufff6\004\ufff6\030\ufff6\033\ufff6\037" +
    "\ufff6\001\002\000\006\017\071\036\115\001\002\000\004" +
    "\010\116\001\002\000\014\004\013\005\026\021\042\023" +
    "\025\026\027\001\002\000\006\006\120\017\071\001\002" +
    "\000\014\002\ufff5\004\ufff5\030\ufff5\033\ufff5\037\ufff5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\024\002\005\003\006\004\015\005\013\006" +
    "\010\007\004\021\007\022\003\023\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\027" +
    "\010\037\011\102\012\036\013\035\014\034\015\033\016" +
    "\032\017\031\020\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\022\005\013\006" +
    "\010\007\004\021\007\022\003\023\016\001\001\000\002" +
    "\001\001\000\004\007\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\007\027\010\037" +
    "\011\040\012\036\013\035\014\034\015\033\016\032\017" +
    "\031\020\030\001\001\000\010\007\027\010\037\020\101" +
    "\001\001\000\002\001\001\000\026\007\027\010\037\011" +
    "\077\012\036\013\035\014\034\015\033\016\032\017\031" +
    "\020\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\027\010\037\014\042" +
    "\015\033\016\032\017\031\020\030\001\001\000\002\001" +
    "\001\000\016\007\027\010\037\015\066\016\032\017\031" +
    "\020\030\001\001\000\016\007\027\010\037\015\065\016" +
    "\032\017\031\020\030\001\001\000\016\007\027\010\037" +
    "\015\064\016\032\017\031\020\030\001\001\000\016\007" +
    "\027\010\037\015\063\016\032\017\031\020\030\001\001" +
    "\000\016\007\027\010\037\015\062\016\032\017\031\020" +
    "\030\001\001\000\016\007\027\010\037\015\051\016\032" +
    "\017\031\020\030\001\001\000\002\001\001\000\014\007" +
    "\027\010\037\016\061\017\031\020\030\001\001\000\014" +
    "\007\027\010\037\016\054\017\031\020\030\001\001\000" +
    "\002\001\001\000\012\007\027\010\037\017\060\020\030" +
    "\001\001\000\012\007\027\010\037\017\057\020\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\027\010\037\012\071\013\035\014\034\015\033\016" +
    "\032\017\031\020\030\001\001\000\002\001\001\000\022" +
    "\007\027\010\037\013\073\014\034\015\033\016\032\017" +
    "\031\020\030\001\001\000\002\001\001\000\026\007\027" +
    "\010\037\011\075\012\036\013\035\014\034\015\033\016" +
    "\032\017\031\020\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\027\010\037\011" +
    "\113\012\036\013\035\014\034\015\033\016\032\017\031" +
    "\020\030\001\001\000\026\007\027\010\037\011\111\012" +
    "\036\013\035\014\034\015\033\016\032\017\031\020\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\027" +
    "\010\037\011\116\012\036\013\035\014\034\015\033\016" +
    "\032\017\031\020\030\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
        

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // app ::= stmt_list 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("app",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= app EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict start_val = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // app ::= 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("app",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_list ::= stmt_list stmt 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt_list ::= stmt 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= stmt_label 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= stmt_assign 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= stmt_goto 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= stmt_if 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= stmt_print 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_label ::= id DPUNTOS 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_label",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt_assign ::= id EQUAL expr PCOMA 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_assign",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt_assign ::= id LS expr RS EQUAL expr PCOMA 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_assign",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_goto ::= GOTO id PCOMA 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_goto",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt_if ::= IF expr THEN stmt_goto 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_if",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt_print ::= PRINT LP expr RP 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_print",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr OR expr1 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr1 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr1 ::= expr1 AND expr2 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr1 ::= expr2 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr2 ::= NOT expr3 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr2 ::= expr3 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr3 ::= expr3 BTHAN expr4 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr3 ::= expr3 LTHAN expr4 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr3 ::= expr3 BETHAN expr4 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr3 ::= expr3 LETHAN expr4 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr3 ::= expr3 DEQUAL expr4 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr3 ::= expr3 NEQUAL expr4 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr3 ::= expr4 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr4 ::= expr4 PLUS expr5 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr4 ::= expr4 MINUS expr5 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr4 ::= expr5 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr5 ::= expr5 MULT expr6 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr5 ::= expr5 DIV expr6 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr5 ::= expr6 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr6 ::= MINUS expr7 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr6",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr6 ::= expr7 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr6",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr7 ::= id 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr7",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr7 ::= id LS expr RS 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr7",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr7 ::= int 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr7",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr7 ::= LP expr RP 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr7",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // id ::= ID 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // int ::= INT 
            {
              Dict RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

