
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Jul 04 15:06:01 CST 2014
//----------------------------------------------------

package com.github.gg.compiler.tres;

import com.github.gg.Dict;
import com.github.gg.Node;
import com.github.gg.TOperation;
import com.github.gg.TType;
import com.github.gg.TErr;
import com.github.gg.Err;
import java.util.ArrayList;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Jul 04 15:06:01 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\004\004\000\002\004\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\033\011\000" +
    "\002\034\003\000\002\034\002\000\002\036\004\000\002" +
    "\036\003\000\002\035\003\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\005\004\000\002\014\004\000" +
    "\002\015\007\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\003\000\002\020\004\000\002\020\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\037\006\000\002\037\006\000" +
    "\002\037\006\000\002\037\006\000\002\037\006\000\002" +
    "\037\006\000\002\037\006\000\002\037\006\000\002\037" +
    "\006\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\037\006\000\002\037\006\000\002\037\006\000" +
    "\002\037\006\000\002\037\006\000\002\037\006\000\002" +
    "\037\006\000\002\037\006\000\002\037\006\000\002\037" +
    "\006\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\030\003\000\002\031\003\000\002\017\003\000" +
    "\002\017\003\000\002\025\003\000\002\025\003\000\002" +
    "\027\006\000\002\026\006\000\002\007\003\000\002\010" +
    "\003\000\002\024\003\000\002\022\003\000\002\023\003" +
    "\000\002\021\003\000\002\021\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\014\002\uffff\003\015\042\017\043\011\047" +
    "\014\001\002\000\014\002\ufffc\003\ufffc\042\ufffc\043\ufffc" +
    "\047\ufffc\001\002\000\036\002\uffac\003\uffac\004\uffac\025" +
    "\uffac\026\uffac\033\uffac\034\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\047\uffac\001\002\000\004\002" +
    "\264\001\002\000\014\002\ufffd\003\ufffd\042\ufffd\043\ufffd" +
    "\047\ufffd\001\002\000\014\002\ufffa\003\ufffa\042\ufffa\043" +
    "\ufffa\047\ufffa\001\002\000\036\002\uffaf\003\uffaf\004\uffaf" +
    "\025\uffaf\026\uffaf\033\uffaf\034\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\047\uffaf\001\002\000\036" +
    "\002\uffad\003\uffad\004\uffad\025\uffad\026\uffad\033\uffad\034" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\047\uffad\001\002\000\014\002\ufffb\003\ufffb\042\ufffb\043" +
    "\ufffb\047\ufffb\001\002\000\004\004\021\001\002\000\036" +
    "\002\uffae\003\uffae\004\uffae\025\uffae\026\uffae\033\uffae\034" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\047\uffae\001\002\000\014\002\001\003\015\042\017\043" +
    "\011\047\014\001\002\000\036\002\uffab\003\uffab\004\uffab" +
    "\025\uffab\026\uffab\033\uffab\034\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\047\uffab\001\002\000\014" +
    "\002\ufffe\003\ufffe\042\ufffe\043\ufffe\047\ufffe\001\002\000" +
    "\046\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\030\uffb2\044\uffb2\045\uffb2\060\uffb2\001\002" +
    "\000\004\023\023\001\002\000\004\024\024\001\002\000" +
    "\004\032\025\001\002\000\032\003\015\004\021\025\033" +
    "\026\040\033\ufff7\034\026\036\037\037\054\040\043\041" +
    "\035\042\017\043\011\001\002\000\064\004\021\031\152" +
    "\050\172\051\166\052\154\053\200\054\160\055\153\056" +
    "\161\057\201\061\167\062\157\063\176\064\162\065\171" +
    "\066\164\067\170\070\175\071\156\072\174\073\151\074" +
    "\165\075\155\076\177\077\163\001\002\000\004\006\150" +
    "\001\002\000\032\003\015\004\021\025\033\026\040\033" +
    "\ufff8\034\026\036\037\037\054\040\043\041\035\042\017" +
    "\043\011\001\002\000\032\003\uffee\004\uffee\025\uffee\026" +
    "\uffee\033\uffee\034\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\001\002\000\032\003\ufff5\004\ufff5\025" +
    "\ufff5\026\ufff5\033\ufff5\034\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\001\002\000\004\004\021\001" +
    "\002\000\032\003\uffef\004\uffef\025\uffef\026\uffef\033\uffef" +
    "\034\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\001\002\000\040\006\uffba\010\uffba\011\uffba\012\uffba" +
    "\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\044\uffba\045\uffba\060\uffba\001\002\000\040" +
    "\006\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\044\uffb6" +
    "\045\uffb6\060\uffb6\001\002\000\004\027\143\001\002\000" +
    "\020\004\021\005\064\036\037\037\054\040\043\041\035" +
    "\046\067\001\002\000\032\003\ufff4\004\ufff4\025\ufff4\026" +
    "\ufff4\033\ufff4\034\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\001\002\000\004\006\121\001\002\000" +
    "\040\006\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\044" +
    "\uffb9\045\uffb9\060\uffb9\001\002\000\032\003\ufff0\004\ufff0" +
    "\025\ufff0\026\ufff0\033\ufff0\034\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\042\ufff0\043\ufff0\001\002\000\004\006\120" +
    "\001\002\000\004\010\116\001\002\000\040\006\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\044\uffb8\045\uffb8\060" +
    "\uffb8\001\002\000\006\007\114\010\113\001\002\000\004" +
    "\010\062\001\002\000\004\033\061\001\002\000\040\006" +
    "\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\044\uffb7\045" +
    "\uffb7\060\uffb7\001\002\000\004\027\056\001\002\000\040" +
    "\006\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\044\uffb5" +
    "\045\uffb5\060\uffb5\001\002\000\004\004\021\001\002\000" +
    "\004\030\060\001\002\000\040\006\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\044\uffb4\045\uffb4\060\uffb4\001\002" +
    "\000\014\002\ufff9\003\ufff9\042\ufff9\043\ufff9\047\ufff9\001" +
    "\002\000\022\004\021\005\064\020\074\036\037\037\054" +
    "\040\043\041\035\046\067\001\002\000\036\006\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\044\uffd5\045\uffd5\060\uffd5\001" +
    "\002\000\036\006\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\044" +
    "\uffb1\045\uffb1\060\uffb1\001\002\000\004\006\uffe8\001\002" +
    "\000\036\006\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\044\uffd7" +
    "\045\uffd7\060\uffd7\001\002\000\036\006\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\044\uffb0\045\uffb0\060\uffb0\001\002\000" +
    "\020\006\uffd9\017\101\020\102\021\100\022\104\044\077" +
    "\045\103\001\002\000\036\006\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\044\uffd8\045\uffd8\060\uffd8\001\002\000\004\006" +
    "\uffdb\001\002\000\036\006\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\044\uffd6\045\uffd6\060\uffd6\001\002\000\020\004\021" +
    "\005\064\036\037\037\054\040\043\041\035\046\067\001" +
    "\002\000\036\006\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\044" +
    "\uffd4\045\uffd4\060\uffd4\001\002\000\004\006\uffda\001\002" +
    "\000\020\004\021\005\064\036\037\037\054\040\043\041" +
    "\035\046\067\001\002\000\020\004\021\005\064\036\037" +
    "\037\054\040\043\041\035\046\067\001\002\000\020\004" +
    "\021\005\064\036\037\037\054\040\043\041\035\046\067" +
    "\001\002\000\020\004\021\005\064\036\037\037\054\040" +
    "\043\041\035\046\067\001\002\000\020\004\021\005\064" +
    "\036\037\037\054\040\043\041\035\046\067\001\002\000" +
    "\020\004\021\005\064\036\037\037\054\040\043\041\035" +
    "\046\067\001\002\000\004\006\uffde\001\002\000\004\006" +
    "\uffdc\001\002\000\004\006\uffe0\001\002\000\004\006\uffe1" +
    "\001\002\000\004\006\uffdf\001\002\000\004\006\uffdd\001" +
    "\002\000\022\004\021\005\064\020\074\036\037\037\054" +
    "\040\043\041\035\046\067\001\002\000\032\003\uffed\004" +
    "\uffed\025\uffed\026\uffed\033\uffed\034\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\001\002\000\004\006" +
    "\uffea\001\002\000\022\004\021\005\064\020\074\036\037" +
    "\037\054\040\043\041\035\046\067\001\002\000\004\006" +
    "\uffe9\001\002\000\032\003\ufff2\004\ufff2\025\ufff2\026\ufff2" +
    "\033\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\001\002\000\032\003\ufff3\004\ufff3\025\ufff3" +
    "\026\ufff3\033\ufff3\034\ufff3\036\ufff3\037\ufff3\040\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\001\002\000\004\060\140\001\002" +
    "\000\016\011\126\012\124\013\127\014\131\015\125\016" +
    "\130\001\002\000\020\004\021\005\064\036\037\037\054" +
    "\040\043\041\035\046\067\001\002\000\020\004\021\005" +
    "\064\036\037\037\054\040\043\041\035\046\067\001\002" +
    "\000\020\004\021\005\064\036\037\037\054\040\043\041" +
    "\035\046\067\001\002\000\020\004\021\005\064\036\037" +
    "\037\054\040\043\041\035\046\067\001\002\000\020\004" +
    "\021\005\064\036\037\037\054\040\043\041\035\046\067" +
    "\001\002\000\020\004\021\005\064\036\037\037\054\040" +
    "\043\041\035\046\067\001\002\000\004\060\uffe7\001\002" +
    "\000\004\060\uffe2\001\002\000\004\060\uffe4\001\002\000" +
    "\004\060\uffe3\001\002\000\004\060\uffe5\001\002\000\004" +
    "\060\uffe6\001\002\000\004\025\033\001\002\000\004\006" +
    "\142\001\002\000\032\003\uffeb\004\uffeb\025\uffeb\026\uffeb" +
    "\033\uffeb\034\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\001\002\000\004\004\021\001\002\000\004" +
    "\030\145\001\002\000\040\006\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\044\uffb3\045\uffb3\060\uffb3\001\002\000" +
    "\004\006\uffec\001\002\000\032\003\ufff6\004\ufff6\025\ufff6" +
    "\026\ufff6\033\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\001\002\000\032\003\ufff1\004\ufff1" +
    "\025\ufff1\026\ufff1\033\ufff1\034\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\001\002\000\004\023\262" +
    "\001\002\000\004\023\260\001\002\000\004\023\256\001" +
    "\002\000\004\023\254\001\002\000\004\023\252\001\002" +
    "\000\004\023\250\001\002\000\004\023\246\001\002\000" +
    "\004\023\244\001\002\000\004\023\242\001\002\000\004" +
    "\023\240\001\002\000\004\023\236\001\002\000\004\023" +
    "\234\001\002\000\004\023\232\001\002\000\004\023\230" +
    "\001\002\000\004\023\226\001\002\000\004\023\224\001" +
    "\002\000\004\023\222\001\002\000\004\023\220\001\002" +
    "\000\004\023\216\001\002\000\004\023\214\001\002\000" +
    "\004\023\212\001\002\000\004\023\210\001\002\000\004" +
    "\023\206\001\002\000\004\023\204\001\002\000\004\023" +
    "\202\001\002\000\004\024\203\001\002\000\004\006\uffc9" +
    "\001\002\000\004\024\205\001\002\000\004\006\uffcd\001" +
    "\002\000\004\024\207\001\002\000\004\006\uffbc\001\002" +
    "\000\004\024\211\001\002\000\004\006\uffc7\001\002\000" +
    "\004\024\213\001\002\000\004\006\uffc2\001\002\000\004" +
    "\024\215\001\002\000\004\006\uffc0\001\002\000\004\024" +
    "\217\001\002\000\004\006\uffd3\001\002\000\004\024\221" +
    "\001\002\000\004\006\uffd2\001\002\000\004\024\223\001" +
    "\002\000\004\006\uffc5\001\002\000\004\024\225\001\002" +
    "\000\004\006\uffc3\001\002\000\004\024\227\001\002\000" +
    "\004\006\uffd0\001\002\000\004\024\231\001\002\000\004" +
    "\006\uffcf\001\002\000\004\024\233\001\002\000\004\006" +
    "\uffbe\001\002\000\004\024\235\001\002\000\004\006\uffc4" +
    "\001\002\000\004\024\237\001\002\000\004\006\uffbb\001" +
    "\002\000\004\024\241\001\002\000\004\006\uffc6\001\002" +
    "\000\004\024\243\001\002\000\004\006\uffca\001\002\000" +
    "\004\024\245\001\002\000\004\006\uffcc\001\002\000\004" +
    "\024\247\001\002\000\004\006\uffc8\001\002\000\004\024" +
    "\251\001\002\000\004\006\uffc1\001\002\000\004\024\253" +
    "\001\002\000\004\006\uffbd\001\002\000\004\024\255\001" +
    "\002\000\004\006\uffce\001\002\000\004\024\257\001\002" +
    "\000\004\006\uffcb\001\002\000\004\024\261\001\002\000" +
    "\004\006\uffd1\001\002\000\004\024\263\001\002\000\004" +
    "\006\uffbf\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\022\002\005\003\006\004\015\021\007\022" +
    "\004\023\011\032\012\033\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\021\001\001\000\002\001\001\000" +
    "\016\003\017\021\007\022\004\023\011\032\012\033\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\005\040\006\041\007\047\014\044\015\043\017" +
    "\050\021\033\022\004\023\011\025\045\026\054\027\035" +
    "\030\046\031\052\032\030\034\051\035\031\036\027\037" +
    "\026\001\001\000\004\007\172\001\001\000\002\001\001" +
    "\000\044\005\040\006\041\007\047\014\044\015\043\017" +
    "\050\021\033\022\004\023\011\025\045\026\054\027\035" +
    "\030\046\031\052\032\030\035\146\037\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\070\010\062\012\121\013\122" +
    "\017\072\024\074\025\065\026\054\027\035\030\046\031" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\007\070\010" +
    "\062\011\064\013\067\017\072\020\071\024\074\025\065" +
    "\026\054\027\035\030\046\031\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\007\070\010\062" +
    "\013\075\017\072\024\074\025\065\026\054\027\035\030" +
    "\046\031\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\007\070\010\062\013\111\017\072\024\074\025" +
    "\065\026\054\027\035\030\046\031\052\001\001\000\026" +
    "\007\070\010\062\013\110\017\072\024\074\025\065\026" +
    "\054\027\035\030\046\031\052\001\001\000\026\007\070" +
    "\010\062\013\107\017\072\024\074\025\065\026\054\027" +
    "\035\030\046\031\052\001\001\000\026\007\070\010\062" +
    "\013\106\017\072\024\074\025\065\026\054\027\035\030" +
    "\046\031\052\001\001\000\026\007\070\010\062\013\105" +
    "\017\072\024\074\025\065\026\054\027\035\030\046\031" +
    "\052\001\001\000\026\007\070\010\062\013\104\017\072" +
    "\024\074\025\065\026\054\027\035\030\046\031\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\070\010\062\011\114\013\067\017\072\020\071" +
    "\024\074\025\065\026\054\027\035\030\046\031\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\070" +
    "\010\062\011\116\013\067\017\072\020\071\024\074\025" +
    "\065\026\054\027\035\030\046\031\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\007\070\010\062\013\136" +
    "\017\072\024\074\025\065\026\054\027\035\030\046\031" +
    "\052\001\001\000\026\007\070\010\062\013\135\017\072" +
    "\024\074\025\065\026\054\027\035\030\046\031\052\001" +
    "\001\000\026\007\070\010\062\013\134\017\072\024\074" +
    "\025\065\026\054\027\035\030\046\031\052\001\001\000" +
    "\026\007\070\010\062\013\133\017\072\024\074\025\065" +
    "\026\054\027\035\030\046\031\052\001\001\000\026\007" +
    "\070\010\062\013\132\017\072\024\074\025\065\026\054" +
    "\027\035\030\046\031\052\001\001\000\026\007\070\010" +
    "\062\013\131\017\072\024\074\025\065\026\054\027\035" +
    "\030\046\031\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	Object info = null;

	public void report_error(String message, Object info){
		this.info = info;
    }

    public void report_fatal_error(String message,Object info){
        report_error(message,info);
        Err err = new Err(TErr.SINTACTICO,message,info);
        System.err.println(err);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // app ::= stmt_list 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dict("stmts",l);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("app",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= app EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict start_val = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // app ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("stmts",new Dict("list",new ArrayList<>()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("app",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_list ::= stmt_list stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getDictArrayList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt_list ::= stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict("list",new ArrayList<Dict>(){{add(x);}});
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= method 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= comment 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= err 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method ::= KW_VOID id LP RP LL method_stmts RL 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict ss = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Dict ref = new Dict("name",x,"stmts",ss,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-6));
					RESULT = new Dict("nodo",new Node(TOperation.DEF_METHOD,null,null,ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_stmts ::= method_stmt_list 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_stmts ::= 
            {
              Dict RESULT =null;
		RESULT = new Dict("list",new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_stmt_list ::= method_stmt_list method_stmt 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							final ArrayList<Dict> list = l.getDictArrayList("list");
							final Node x_node = x.getNode("nodo");
							final TOperation x_node_operation = (TOperation) x_node.getOperation();

							if(x_node_operation == TOperation.LABEL){
								x_node.getDictRef().put("position",list.size());
							}
							list.add(x);

							RESULT = l;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_stmt_list ::= method_stmt 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							final ArrayList<Dict> list = new ArrayList<>();
							final Node x_node = x.getNode("nodo");
							final TOperation x_node_operation = (TOperation) x_node.getOperation();

							if(x_node_operation == TOperation.LABEL){
								x_node.getDictRef().put("position",list.size());
							}
							list.add(x);

							RESULT = new Dict("list",list);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_stmt ::= label 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_stmt ::= expr_assign PCOMA 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_stmt ::= stmt_goto PCOMA 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_stmt ::= method_call PCOMA 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_stmt ::= stmt_if 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_stmt ::= err 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_stmt ::= comment 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // label ::= id DPUNTOS 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Dict ref = new Dict("name",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-0));
					RESULT = new Dict("nodo",new Node(TOperation.LABEL,null,null,ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt_goto ::= GOTO id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("name",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.GOTO,null,null,ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_goto",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt_if ::= IF expr_rel THEN stmt_goto PCOMA 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict g = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Dict ref = new Dict("condition",x,"goto",g,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-4));
					RESULT = new Dict("nodo",new Node(TOperation.STMT_IF,x.getNode("nodo"),null,ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr_assign ::= id EQUAL expr_arith 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict v = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("name",x,"val",v,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,x.getNode("nodo"),v.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_assign",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr_assign ::= memory EQUAL expr_arith 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict v = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("name",x,"val",v,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,x.getNode("nodo"),v.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_assign",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr_assign ::= pointer EQUAL expr_arith 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict v = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("name",x,"val",v,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,x.getNode("nodo"),v.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_assign",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr_rel ::= expr_primary BTHAN expr_primary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.BTHAN,l.getNode("nodo"),r.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr_rel ::= expr_primary LTHAN expr_primary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.LTHAN,l.getNode("nodo"),r.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr_rel ::= expr_primary BETHAN expr_primary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.BETHAN,l.getNode("nodo"),r.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr_rel ::= expr_primary LETHAN expr_primary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.LETHAN,l.getNode("nodo"),r.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_rel ::= expr_primary DEQUAL expr_primary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.DEQUAL,l.getNode("nodo"),r.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_rel ::= expr_primary NEQUAL expr_primary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.NEQUAL,l.getNode("nodo"),r.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_arith ::= expr_primary PLUS expr_primary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.PLUS,l.getNode("nodo"),r.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_arith",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_arith ::= expr_primary MINUS expr_primary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.MINUS,l.getNode("nodo"),r.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_arith",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_arith ::= expr_primary MULT expr_primary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.MULT,l.getNode("nodo"),r.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_arith",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_arith ::= expr_primary DIV expr_primary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.DIV,l.getNode("nodo"),r.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_arith",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_arith ::= expr_primary MOD expr_primary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.MOD,l.getNode("nodo"),r.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_arith",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_arith ::= expr_primary EXP expr_primary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict r = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.EXP,l.getNode("nodo"),r.getNode("nodo"),ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_arith",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_arith ::= expr_unary 
            {
              Dict RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict l = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_arith",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_unary ::= MINUS expr_primary 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						final Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
						RESULT = new Dict("nodo",new Node (TOperation.LMINUS,x.getNode("nodo"),null,ref));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_unary ::= expr_primary 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unary",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_primary ::= id 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_primary",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_primary ::= memory 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_primary",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_primary ::= pointer 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_primary",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_primary ::= int 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_primary",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_primary ::= float 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_primary",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_call ::= KW_CALL id LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
						RESULT = new Dict("nodo",new Node(TOperation.METHOD_CALL,null,null,new Dict("name",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3))));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // method_call ::= KW_CALL PRINT_CHAR LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.PRINT_CHAR,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // method_call ::= KW_CALL PRINT_NUM LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.PRINT_NUM,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // method_call ::= KW_CALL PRINT_BOOLEAN LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.PRINT_BOOLEAN,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // method_call ::= KW_CALL KW_LINEA LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_LINEA,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // method_call ::= KW_CALL KW_TEXTO LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_TEXTO,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // method_call ::= KW_CALL KW_ARCO LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_ARCO,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // method_call ::= KW_CALL KW_RECTANGULO LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_RECTANGULO,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // method_call ::= KW_CALL KW_OVALO LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_OVALO,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // method_call ::= KW_CALL KW_POLIGONO LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_POLIGONO,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // method_call ::= KW_CALL KW_LIENZO LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_LIENZO,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // method_call ::= KW_CALL KW_INT2CHAR LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_INT2CHAR,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // method_call ::= KW_CALL KW_INT2FLOAT LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_INT2FLOAT,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // method_call ::= KW_CALL KW_INT2STRING LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_INT2STRING,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // method_call ::= KW_CALL KW_INT2BOOLEAN LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_INT2BOOLEAN,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // method_call ::= KW_CALL KW_FLOAT2STRING LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_FLOAT2STRING,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // method_call ::= KW_CALL KW_FLOAT2INT LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_FLOAT2INT,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // method_call ::= KW_CALL KW_CHAR2INT LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_CHAR2INT,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // method_call ::= KW_CALL KW_CHAR2STRING LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_CHAR2STRING,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // method_call ::= KW_CALL KW_STRING2INT LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_STRING2INT,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // method_call ::= KW_CALL KW_STRING2FLOAT LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_STRING2FLOAT,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // method_call ::= KW_CALL KW_STRING2CHAR LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_STRING2CHAR,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // method_call ::= KW_CALL KW_STRING2BOOLEAN LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_STRING2BOOLEAN,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // method_call ::= KW_CALL KW_BOOLEAN2STRING LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_BOOLEAN2STRING,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // method_call ::= KW_CALL KW_BOOLEAN2INT LP RP 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_BOOLEAN2INT,null,null,ref));
	  				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // p ::= P 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.peek(),"type","pointer","val",x,"pointer",Sym.P);
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("p",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // h ::= H 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.peek(),"type","pointer","val",x,"pointer",Sym.H);
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // pointer ::= p 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // pointer ::= h 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // memory ::= stack 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memory",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // memory ::= heap 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memory",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stack ::= STACK LS id RS 
            {
              Dict RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Dict ref = new Dict("memory",Sym.STACK,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3),"position",x,"type","memory");
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stack",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // heap ::= HEAP LS id RS 
            {
              Dict RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Dict ref = new Dict("memory",Sym.HEAP ,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3),"position",x,"type","memory");
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("heap",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // id ::= ID 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.peek(),"type",TType.REF,"val",x);
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // int ::= INT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.peek(),"type",TType.INT,"val",x);
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // float ::= FLOAT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Dict ref = new Dict("info",CUP$Parser$stack.peek(),"type",TType.FLOAT,"val",x);
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("float",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // error_lexico ::= ERROR 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						Dict ref = new Dict("info",parser.info,"val",x);
						RESULT = new Dict("nodo",new Node(TOperation.ERROR_LEXICO,null,null,ref));
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_lexico",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // error_sintactico ::= error 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							Dict ref = new Dict("info",parser.info,"val",x);
							RESULT = new Dict("nodo",new Node(TOperation.ERROR_SINTACTICO,null,null,ref));
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_sintactico",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // err ::= error_sintactico 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("err",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // err ::= error_lexico 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dict x = (Dict)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("err",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comment ::= COMMENT 
            {
              Dict RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Dict("nodo",new Node(TOperation.COMMENT,null,null,new Dict("val",x,"info",CUP$Parser$stack.peek())));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comment",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

