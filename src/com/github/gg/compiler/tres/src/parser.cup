package com.github.gg.compiler.tres;

import com.github.gg.Dict;
import com.github.gg.Node;
import com.github.gg.TOperation;
import com.github.gg.TType;
import com.github.gg.TErr;
import com.github.gg.Err;
import java.util.ArrayList;

//===============================================================================================//
//===============================================================================================//

parser code {:
	Object info = null;

	public void report_error(String message, Object info){
		this.info = info;
    }

    public void report_fatal_error(String message,Object info){
        report_error(message,info);
        Err err = new Err(TErr.SINTACTICO,message,info);
        System.err.println(err);
    }
:};

action code{::}
   
//===============================================================================================//
//===============================================================================================//
terminal        String 		ID,INT,PCOMA,DPUNTOS,EQUAL,DEQUAL,LTHAN,LETHAN,BTHAN,BETHAN,NEQUAL,
							PLUS,MINUS,MULT,DIV,LP,RP,GOTO,IF,LS,RS,PRINT_NUM,LL,RL,KW_CALL,
							PRINTLN,HEAP,STACK,H,P,COMMENT,ERROR,MOD,EXP,FLOAT,KW_VOID,PRINT_CHAR,
							KW_LINEA,KW_TEXTO,KW_ARCO,KW_RECTANGULO,KW_OVALO,KW_POLIGONO,KW_LIENZO,
							THEN,PRINT_BOOLEAN,KW_INT2CHAR,KW_INT2FLOAT,KW_INT2STRING,KW_INT2BOOLEAN,
							KW_FLOAT2STRING,KW_FLOAT2INT,KW_CHAR2INT,KW_CHAR2STRING,KW_STRING2INT,
							KW_STRING2FLOAT,KW_STRING2CHAR,KW_STRING2BOOLEAN,KW_BOOLEAN2STRING,
							KW_BOOLEAN2INT
							;
non terminal    Dict        app,stmt,stmt_list,label,expr_assign,id,int,expr_arith,expr_rel,
							expr_primary,stmt_goto,stmt_if,method_stmts_list,pointer,expr_unary,
							err, error_lexico,error_sintactico,float,memory,heap,stack,p,h,
							comment,method,method_stmts,method_stmt,method_stmt_list,method_call
							;
//===============================================================================================//
//===============================================================================================//

app			::=	stmt_list:l 	{:RESULT = new Dict("stmts",l);:}
				| 				{:RESULT = new Dict("stmts",new Dict("list",new ArrayList<>()));:}
				;
stmt_list	::=	stmt_list:l stmt:x
				{:
					l.getDictArrayList("list").add(x);
					RESULT = l;
				:}
				|stmt:x 			
				{:
					RESULT = new Dict("list",new ArrayList<Dict>(){{add(x);}});
				:}
				;

stmt 		::=	method:x 	{:RESULT = x;:}
				|comment:x 	{:RESULT = x;:}
				|err:x		{:RESULT = x;:}
				;

method 		::= KW_VOID id:x LP RP LL method_stmts:ss RL
				{:
					Dict ref = new Dict("name",x,"stmts",ss,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-6));
					RESULT = new Dict("nodo",new Node(TOperation.DEF_METHOD,null,null,ref));
				:}
				;


method_stmts 	::=	method_stmt_list:x 	{:RESULT = x;:}
					| 					{:RESULT = new Dict("list",new ArrayList<>());:}
					;

method_stmt_list 	::=	method_stmt_list:l method_stmt:x
						{:
							final ArrayList<Dict> list = l.getDictArrayList("list");
							final Node x_node = x.getNode("nodo");
							final TOperation x_node_operation = (TOperation) x_node.getOperation();

							if(x_node_operation == TOperation.LABEL){
								x_node.getDictRef().put("position",list.size());
							}
							list.add(x);

							RESULT = l;
						:}
						|method_stmt:x
						{:
							final ArrayList<Dict> list = new ArrayList<>();
							final Node x_node = x.getNode("nodo");
							final TOperation x_node_operation = (TOperation) x_node.getOperation();

							if(x_node_operation == TOperation.LABEL){
								x_node.getDictRef().put("position",list.size());
							}
							list.add(x);

							RESULT = new Dict("list",list);
						:}
						;

method_stmt 	::=	label:x					{:RESULT = x;:}
					|expr_assign:x PCOMA 	{:RESULT = x;:}
					|stmt_goto:x PCOMA		{:RESULT = x;:}
					|method_call:x PCOMA 	{:RESULT = x;:}
					|stmt_if:x 				{:RESULT = x;:}
					|err:x 					{:RESULT = x;:}
					|comment:x 				{:RESULT = x;:}
					;

label	::=	id:x DPUNTOS 	
				{:
					Dict ref = new Dict("name",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-0));
					RESULT = new Dict("nodo",new Node(TOperation.LABEL,null,null,ref));
				:}
				;

stmt_goto 	::=	GOTO id:x
				{:
					Dict ref = new Dict("name",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.GOTO,null,null,ref));
				:}
				;

stmt_if 	::=	IF  expr_rel:x  THEN  stmt_goto:g PCOMA
				{:
					Dict ref = new Dict("condition",x,"goto",g,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-4));
					RESULT = new Dict("nodo",new Node(TOperation.STMT_IF,x.getNode("nodo"),null,ref));
				:}
				;


expr_assign ::=	id:x EQUAL expr_arith:v
				{:
					Dict ref = new Dict("name",x,"val",v,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,x.getNode("nodo"),v.getNode("nodo"),ref));
				:} 
				|memory:x EQUAL expr_arith:v
				{:
					Dict ref = new Dict("name",x,"val",v,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,x.getNode("nodo"),v.getNode("nodo"),ref));
				:}
				|pointer:x EQUAL expr_arith:v
				{:
					Dict ref = new Dict("name",x,"val",v,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.SET_VAR,x.getNode("nodo"),v.getNode("nodo"),ref));
				:}
				;

expr_rel 	::=	expr_unary:l BTHAN expr_unary:r
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.BTHAN,l.getNode("nodo"),r.getNode("nodo"),ref));
				:}
				|expr_unary:l LTHAN expr_unary:r
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.LTHAN,l.getNode("nodo"),r.getNode("nodo"),ref));
				:}
				|expr_unary:l BETHAN expr_unary:r
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.BETHAN,l.getNode("nodo"),r.getNode("nodo"),ref));
				:}
				|expr_unary:l LETHAN expr_unary:r
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.LETHAN,l.getNode("nodo"),r.getNode("nodo"),ref));
				:}
				|expr_unary:l DEQUAL expr_unary:r
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.DEQUAL,l.getNode("nodo"),r.getNode("nodo"),ref));
				:}
				|expr_unary:l NEQUAL expr_unary:r
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.NEQUAL,l.getNode("nodo"),r.getNode("nodo"),ref));
				:}
				;

expr_arith 	::=	expr_primary:l PLUS expr_primary:r
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.PLUS,l.getNode("nodo"),r.getNode("nodo"),ref));
				:}
				|expr_primary:l MINUS expr_primary:r
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.MINUS,l.getNode("nodo"),r.getNode("nodo"),ref));
				:}
				|expr_primary:l MULT expr_primary:r
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.MULT,l.getNode("nodo"),r.getNode("nodo"),ref));
				:}
				|expr_primary:l DIV expr_primary:r
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.DIV,l.getNode("nodo"),r.getNode("nodo"),ref));
				:}
				|expr_primary:l MOD expr_primary:r
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.MOD,l.getNode("nodo"),r.getNode("nodo"),ref));
				:}
				|expr_primary:l EXP expr_primary:r
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
					RESULT = new Dict("nodo",new Node(TOperation.EXP,l.getNode("nodo"),r.getNode("nodo"),ref));
				:}
				|expr_unary:l
				{:
					RESULT = l;
				:}
				;

expr_unary 		::=	MINUS expr_primary:x 	
					{:
						final Dict ref = new Dict("info",CUP$Parser$stack.elementAt(CUP$Parser$top-1));
						RESULT = new Dict("nodo",new Node (TOperation.LMINUS,x.getNode("nodo"),null,ref));
					:}
					|expr_primary:x 		{:RESULT = x;:}
					;

expr_primary	::=	id:x  			{:RESULT = x;:}
					|memory:x 		{:RESULT = x;:}
					|pointer:x 		{:RESULT = x;:}
					|int:x 			{:RESULT = x;:}
					|float:x 		{:RESULT = x;:}
					;

method_call 	::=	KW_CALL id:x LP RP
					{:
						RESULT = new Dict("nodo",new Node(TOperation.METHOD_CALL,null,null,new Dict("name",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3))));
					:}
					|KW_CALL PRINT_CHAR:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.PRINT_CHAR,null,null,ref));
	  				:}
					|KW_CALL PRINT_NUM:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.PRINT_NUM,null,null,ref));
	  				:}
	  				|KW_CALL PRINT_BOOLEAN:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.PRINT_BOOLEAN,null,null,ref));
	  				:}
					|KW_CALL KW_LINEA:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_LINEA,null,null,ref));
	  				:}
					|KW_CALL KW_TEXTO:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_TEXTO,null,null,ref));
	  				:}
					|KW_CALL KW_ARCO:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_ARCO,null,null,ref));
	  				:}
					|KW_CALL KW_RECTANGULO:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_RECTANGULO,null,null,ref));
	  				:}
					|KW_CALL KW_OVALO:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_OVALO,null,null,ref));
	  				:}
					|KW_CALL KW_POLIGONO:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_POLIGONO,null,null,ref));
	  				:}
					|KW_CALL KW_LIENZO:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.NM_LIENZO,null,null,ref));
	  				:}
	  				|KW_CALL KW_INT2CHAR:x LP RP
	  				{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_INT2CHAR,null,null,ref));
	  				:}
	  				|KW_CALL KW_INT2FLOAT:x LP RP
	  				{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_INT2FLOAT,null,null,ref));
	  				:}
	  				|KW_CALL KW_INT2STRING:x LP RP
	  				{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_INT2STRING,null,null,ref));
	  				:}
	  				|KW_CALL KW_INT2BOOLEAN:x LP RP
	  				{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_INT2BOOLEAN,null,null,ref));
	  				:}
					|KW_CALL KW_FLOAT2STRING:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_FLOAT2STRING,null,null,ref));
	  				:}
					|KW_CALL KW_FLOAT2INT:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_FLOAT2INT,null,null,ref));
	  				:}
					|KW_CALL KW_CHAR2INT:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_CHAR2INT,null,null,ref));
	  				:}
					|KW_CALL KW_CHAR2STRING:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_CHAR2STRING,null,null,ref));
	  				:}
					|KW_CALL KW_STRING2INT:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_STRING2INT,null,null,ref));
	  				:}
					|KW_CALL KW_STRING2FLOAT:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_STRING2FLOAT,null,null,ref));
	  				:}
					|KW_CALL KW_STRING2CHAR:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_STRING2CHAR,null,null,ref));
	  				:}
					|KW_CALL KW_STRING2BOOLEAN:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_STRING2BOOLEAN,null,null,ref));
	  				:}
					|KW_CALL KW_BOOLEAN2STRING:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_BOOLEAN2STRING,null,null,ref));
	  				:}
					|KW_CALL KW_BOOLEAN2INT:x LP RP
					{:
	  					Dict ref = new Dict("name",new Dict("val",x,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-2)),"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3));
	  					RESULT = new Dict("nodo",new Node(TOperation.CAST_BOOLEAN2INT,null,null,ref));
	  				:}
					;
p 			::=	P:x
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.peek(),"type","pointer","val",x,"pointer",Sym.P);
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				:}
				;
h 			::= H:x
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.peek(),"type","pointer","val",x,"pointer",Sym.H);
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				:}
				;

pointer 	::=	p:x 		{:RESULT = x;:}
				|h:x 		{:RESULT = x;:}
				;
memory 		::=	stack:x 	{:RESULT = x;:}
				|heap:x 	{:RESULT = x;:}
				;
stack 		::=	STACK:m LS id:x RS
				{:
					Dict ref = new Dict("memory",Sym.STACK,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3),"position",x,"type","memory","name",m);
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				:}
				;
heap 		::= HEAP:m LS id:x RS
				{:
					Dict ref = new Dict("memory",Sym.HEAP ,"info",CUP$Parser$stack.elementAt(CUP$Parser$top-3),"position",x,"type","memory","name",m);
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				:}
				;

id 			::= ID:x
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.peek(),"type",TType.REF,"val",x);
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				:}
				;
int 		::=	INT:x
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.peek(),"type",TType.INT,"val",x);
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				:}
				;
float 		::=	FLOAT:x
				{:
					Dict ref = new Dict("info",CUP$Parser$stack.peek(),"type",TType.FLOAT,"val",x);
					RESULT = new Dict("nodo",new Node(TOperation.LEAF,null,null,ref));
				:}
				;


error_lexico	::=	ERROR:x
					{:
						Dict ref = new Dict("info",parser.info,"val",x);
						RESULT = new Dict("nodo",new Node(TOperation.ERROR_LEXICO,null,null,ref));
					:}
					;

error_sintactico 	::=	error:x
						{:
							Dict ref = new Dict("info",parser.info,"val",x);
							RESULT = new Dict("nodo",new Node(TOperation.ERROR_SINTACTICO,null,null,ref));
						:}
						;


err 	::=	error_sintactico:x 	{:RESULT = x;:}
			|error_lexico:x 	{:RESULT = x;:}
			;

comment 	::=	COMMENT:x
				{:
					RESULT = new Dict("nodo",new Node(TOperation.COMMENT,null,null,new Dict("val",x,"info",CUP$Parser$stack.peek())));
				:}
				;